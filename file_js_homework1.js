console.log('number' + 3 + 3); /* number33, 
коли один з операндів є строковим, 
JavaScript перетворює інший операнд на рядок, 
число '3' перетворюється на строку '"3"',
оператор '+' використовується для конкатинації строк, '"number" + "3"' => "number3", 
рядок '"number3"' і число '3' перетворюється на рядок '"3"', 
'"number3" + "3"' => "number33" */

console.log(null + 3); /* 3
при використанні математичних операцій 'null' перетворюється на '0', '0 + 3' => 3 */

console.log(5 && "qwerty"); /* 5qwerty
 && логічний оператор 'і', => перевірка 2-х умов,
повертає перше значення якщо false і друге значення якщо true, 
всі числа окрім '0' => true, будь-який рядок окрім порожньої "" => true
5 => true, qwerty => true, обидва операнди є true, тому повертається другий операнд */ 

console.log(+'40' + +'2' + 'hillel'); /* 42hillel
унарний '+' перетворює рядок на число, рядок '"40" та "2"' перетворюєится на числа '40 та 2',
два операнди є числами виконується математичне додавання чисел '40 + 2' => 42
'hillel' є рядком отже виконується перетворення числа '42' на рядок '"42"' 
і відбувається конкатинація '"42" + "hillel"' => "42hillel" */

console.log('10' - 5 === 6); /* false
оператор '-' арифметичний, рядок '"10"' перетворюється на число '10',
два операнди є числами виконується математичне віднімання чисел '10 - 5' => 5
'===' строгий оператор порівняння, який перевіряє рівність значень та рівність типів операндів, 
5 != 6 , результат порівняння = false */

console.log(true + false); /* 1
відбувається приведення типів до числа і виконується  арифметичне додавання чисел
true = 1, false = 0, '1 + 0' => 1 */

console.log('4px' - 3); /* Nan
виконується спроба арифметичного віднімання та переведення рядка в число
рядок '4px' містить символи які не можуть бути частиною валідного числа, результатом приведення буде спеціальне значення NaN (not a number)
'NaN - 3' будь-яка арефметична дія з NaN завжди повертає NaN */

console.log('4' - 3); /* 1
виконується спроба арифметичного віднімання та переведення рядка в число
рядок '"4"' перетворюється на число '4'
два операнди є числами виконується математичне віднімання чисел '4 - 3' => 1 */

console.log('6' + 3 ** 0); /* 61
виконується урахування пріоритету операторів та автоматичне перетворення типів даних
оператор '**' має вищий пріоритет, ніж оператор додавання, тому спочатку виконується операція експоненції
'3 ** 0' => 1, оскільки будь-яке число (крім нуля) у ступені 0 дорівнює 1.
один із операндів є рядком '"6"', відповідно число '1' перетворюється на рядок '"1"'
виконується операція конкатенації '"6" + "1"' => "61" */
console.log(12 / '6'); /* 2
два операнди: число '12' і рядок '"6"', оператор ділення '/'
перетворення рядка '"6"' в число '6'
виконання операції ділення '12 / 6' => 2 */

console.log('10' + (5 === 6)); /* 10false
операція порівняння (5 === 6) виконується першою, оскільки вона знаходиться у дужках,
5 != 6, тому результатом порівняння є false.
перший операнд є рядком '10', оператор '+' використовується для конкатенації рядків
і автоматично перетворює другий операнд до рядкового типу перед виконанням операції.
'"10" + "false"' => "10false" */

console.log(null == ''); /* false  
null рівне лише null або undefined, але не пустому рядку або будь-якому іншому значенню */

console.log(3 ** (9 / 3)); /*27
 оператор ділення / має вищий пріоритет, ніж оператор експоненції **, тому спочатку виконується ділення.
'9 / 3' => 3
 виконується операція експоненції '3 ** 3' = 27 */
  
console.log(!!'false' == !!'true'); /* true
подвійний логічний оператор НЕ '!!' використовується для перетворення значення у булевий тип
перший оператор НЕ '!!' перетворює будь-яке значення на його булеве протилежне
а другий оператор НЕ знову перетворює це протилежне значення на первісне булеве значення
перетворення непорожніх рядків на булевий тип.
!!'false' => true, оскільки 'false' є непорожнім рядком
!!'true' => true, оскільки 'true' також є непорожнім рядком 
обидва вирази є true => true */

console.log(0 || '0' && 1); /* 1
&& логічний оператор 'і', || логічний оператор 'або'
логічний оператор && має вищий пріоритет, ніж ||
спочатку виконується вираз '0' && '1'.
'0' => true, будь-який непорожній рядок вважається істинним значенням
1 => true, також є істинним значенням 
true && true = true 
'0 || 1' => 1, оператор '||' повертає перше істинне (true) значення серед своїх операндів
а якщо обидва хибні, то останнє хибне значення, то в цьому випадку він поверне 1,
оскільки 1 є істинним значенням, і це перше (і єдине) істинне значення оператора */

console.log((+null == false) < 1); /* false
'+' перед null перетворює null на число '0'
'0' порівнюється з false, результат буде true, оскільки false перетворюється на 0 при нестрогому порівнянні.
'0 == 0' => true
'true < 1' перетворюється на 1 < 1, що є false */

console.log(false && true || true); /* true
огічне І (&&) має вищий пріоритет, ніж логічне АБО (||),
спочатку виконується операція false && true => false, перший операнд є false, результатом стає false без необхідності оцінювати другий операнд, згідно з правилом "короткого замикання":
false || true => повертає true, якщо хоча б один із операндів є true*/

console.log(false && (false || true)); /* false
виконується операція всередині дужок, логічне АБО (||) повертає true, якщо хоча б один з операндів є true
логічне І (&&) повертає true лише тоді, коли обидва операнди є true */

console.log((+null == false) < 1 ** 5); /* false
'1 ** 5' => 1, означає одиницю в п'ятому ступені
'+' перетворює null на число '0'
при нестрогому порівнянні, 'false' перетворюється на '0'
'0 == 0' => true
'true < 1' => true в математичних порівняннях, перетворюється на '1' 
'1 < 1' => false */




